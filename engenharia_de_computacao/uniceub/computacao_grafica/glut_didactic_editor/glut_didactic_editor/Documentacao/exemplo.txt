#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include <glut.h>

//armazena os vértices de um objeto
struct VERTEX
{
	int x;
	int y;
	int z;
};

//armazena a descrição geométrica de um objeto
struct OBJECT
{
	VERTEX *vertices;
	int nrvertices;
};

OBJECT *object; //objeto global que será desenhado

OBJECT *create_object()
{
	OBJECT *obj = (OBJECT *)malloc(sizeof(OBJECT));
	obj->nrvertices = 6;
	obj->vertices = (VERTEX *)malloc(obj->nrvertices * sizeof(VERTEX));

	obj->vertices[0].x = 10;
	obj->vertices[0].y = 200;
	obj->vertices[0].z = 0;

	obj->vertices[1].x = 40;
	obj->vertices[1].y = 200;
	obj->vertices[1].z = 0;

	obj->vertices[2].x = 40;
	obj->vertices[2].y = 50;
	obj->vertices[2].z = 0;

	obj->vertices[3].x = 100;
	obj->vertices[3].y = 50;
	obj->vertices[3].z = 0;

	obj->vertices[4].x = 100;
	obj->vertices[4].y = 0;
	obj->vertices[4].z = 0;

	obj->vertices[5].x = 10;
	obj->vertices[5].y = 0;
	obj->vertices[5].z = 0;

	return obj;
}

void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	object = create_object(); //cria o objeto
}

void desenha(OBJECT* obj, int opt)
{
	/* opt == Operacoes de transformacao
	* Operacoes na matriz da imagem
	* 0 = Nenhum
	* 1 = Reflexao 0y. Questão 1
	* 2 = Reflexao y = x. QUestao 2
	*/

	int i;
	glBegin(GL_LINE_LOOP); //desenha uma linha

	for (i = 0; i < obj->nrvertices; i++)
	{
		if (opt == 0)
		{
			// Desenha sem alterações
			glVertex3f(obj->vertices[i].x, obj->vertices[i].y);
		}
		if (opt == 1)
		{
			// Reflexao 0y
			glVertex3f(obj->vertices[i].x*-1, obj->vertices[i].y);
		}
		if (opt == 2)
		{
			// Reflexao y=x
			glVertex3f(obj->vertices[i].y, obj->vertices[i].x);
		}

	}

	glEnd();
}

void funcoesTeclado(unsigned char key, int x, int y)
{
	if (key == 27)
	{
		if (object != NULL)
		{
			free(object->vertices); //elimina o objeto
			free(object); //elimina o objeto
			exit(1);
		}
	}
}

void funcoesMouse(int a, int b, int c, int d)
{
	if (a == GLUT_LEFT_BUTTON)
		if (b == GLUT_UP) {  // Zoom-in
			glutTimerFunc(10, Timer, 1);
		}
	if (a == GLUT_RIGHT_BUTTON)
		if (b == GLUT_UP) {  // Zoom-out
			CriaMenu();
		}
	glutPostRedisplay();
}

void funcoesEspeciais(int a, int b, int c)
{
	if (a == GLUT_LEFT_BUTTON)
		if (b == GLUT_UP) {  // Zoom-in
			glutTimerFunc(10, Timer, 1);
		}
	if (a == GLUT_RIGHT_BUTTON)
		if (b == GLUT_UP) {  // Zoom-out
			CriaMenu();
		}
	EspecificaParametrosVisualizacao();
	glutPostRedisplay();
}


void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT); //desenha o fundo (limpa a janela)

	glColor3f(1.0, 0.0, 0.0); //altera o atributo de cor
	glMatrixMode(GL_MODELVIEW); //garante que a matrix seja a ModelView

	glPushMatrix();
	desenha(object, 0); //desenha a letra L
	glPopMatrix();

	// Exercicio 1, Reflexao 0y
	glPushMatrix();
	desenha(object, 1);
	glPopMatrix();


	glFlush(); //processa as rotinas OpenGL o mais rápido possível
}


int main(int argc, char**argv)
{
	//glutInit(&argc, argv); // glutInit() obrigatorio no Linux
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(1920, 1080);
	glutCreateWindow("Criador de objetos");

	init(); // inicialização (após a criação da janela)

	glutDisplayFunc(display); // registra a função de desenho

	glEnable(GL_DEPTH_TEST);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	glutKeyboardFunc(funcoesTeclado);
	glutMouseFunc(funcoesMouse);
	glutSpecialFunc(funcoesEspeciais);

	glutMainLoop(); // desenha tudo e espera por eventos
	return EXIT_SUCCESS;
}